#ifndef MODBUS_SLAVE_IDEF_H
#define MODBUS_SLAVE_IDEF_H
//**********************************************************************************************************************
//
// Copyright (C) 2009, FINE-TEK CO.,LTD. Taiwan  All Rights Reserved
//
//! @file 		 modbus_slave_idef.h
//
//! @author 	 Willman Chen
//
//! @date 		 2009/11/10
//
//  @brief 		 Here define internal constant
//
//**********************************************************************************************************************
//**********************************************************************************************************************
//
// E X T E R N A L   G L O B A L   C O N S T A N C E   /   V A R I A B L E S   I N   E E P R O M
//
//**********************************************************************************************************************
#define MODBUS_SLAVE_HEADER_START_ADDRESS    				0x1000
#define MODBUS_SLAVE_NULL_ADDRESS                                       0xffff
#define MODBUS_SLAVE_HEADER_NUM						32
#define MODBUS_SLAVE_READONLY_START_ADDRESS				(MODBUS_SLAVE_HEADER_START_ADDRESS+MODBUS_SLAVE_HEADER_NUM)
#define MODBUS_SLAVE_READONLY_NUM					100
#define MODBUS_SLAVE_READ_WRITE_START_ADDRESS				(MODBUS_SLAVE_HEADER_START_ADDRESS+MODBUS_SLAVE_HEADER_NUM+MODBUS_SLAVE_READONLY_NUM)
#define MODBUS_SLAVE_READ_WRITE_NUM					168      
#define MODBUS_SLAVE_DDF_START_ADDRESS					(MODBUS_SLAVE_READ_WRITE_START_ADDRESS+MODBUS_SLAVE_READ_WRITE_NUM)
#define MODBUS_SLAVE_DDF_LEN						333
#define MODBUS_SLAVE_LAST_ADDRESS					(MODBUS_SLAVE_DDF_START_ADDRESS+MODBUS_SLAVE_DDF_LEN)
#define MODBUS_SLAVE_MAX_BUFFER_SIZE					256  //256
#define MODBUS_SLAVE_MAX_COMMAND					25
#define MODBUS_SLAVE_ERROR_CODE_MASK					0x80
#define MODBUS_SLAVE_BYTE_BITS						8
#define MODBUS_SLAVE_HIGH_BYTE_MASK					0xff00
#define MODBUS_SLAVE_LOW_BYTE_MASK					0xff
#define MODBUS_SLAVE_MAX_REGISTER_ADDRESS				0xffff
#define MODBUS_SLAVE_ADDRESS_LEN					1
#define MODBUS_SLAVE_CRC_LEN						2
#define MODBUS_SLAVE_CRC_HI_BYTE_POS					1
#define MODBUS_SLAVE_CRC_LOW_BYTE_POS					2
#define MODBUS_SLAVE_ASCII_START_CHAR					':'
#define MODBUS_SLAVE_ASCII_ZERO_CHAR					'0'
#define MODBUS_SLAVE_ASCII_NINE_CHAR					'9'
#define MODBUS_SLAVE_ASCII_A_CHAR					'A'
#define MODBUS_SLAVE_ASCII_F_CHAR					'F'
#define MODBUS_SLAVE_HEX_0						0x00
#define MODBUS_SLAVE_HEX_9						0x09
#define MODBUS_SLAVE_HEX_A						0x0A
#define MODBUS_SLAVE_HEX_F						0x0F
#define MODBUS_SLAVE_HEX_TEN						MODBUS_SLAVE_HEX_A
#define MODBUS_SLAVE_ASCII_NULL_VALUE					0xff
#define MODBUS_SLAVE_LOW_FOUR_BITS					0x0f
#define MODBUS_SLAVE_HIGH_FOUR_BITS					0xf0
#define MODBUS_SLAVE_HALF_BYTE_BITS					4
#define MODBUS_SLAVE_CR_CODE						0x0D
#define MODBUS_SLAVE_LF_CODE						0x0A
#define MODBUS_SLAVE_EPH_ADDRESS_NUM                                    40

enum MODBUS_SLAVE_SUPPORTED_CMD
{
    MODBUS_SLAVE_SUPPORTED_CMD_NO,
    MODBUS_SLAVE_SUPPORTED_CMD_YES,
};

enum MODBUS_SLAVE_BYTE_NAME
{
    MODBUS_SLAVE_BYTE_NAME_ADDRESS,
    MODBUS_SLAVE_BYTE_NAME_FUNCTION_BYTE,
};

enum MODBUS_SLAVE_STATE
{
    MODBUS_SLAVE_STATE_STOP,
    MODBUS_SLAVE_STATE_RECEIVING_AND_CHECKING,
    MODBUS_SLAVE_STATE_ACTION,
    MODBUS_SLAVE_STATE_RESPONSE,
    MODBUS_SLAVE_STATE_SENDING,
    MODBUS_SLAVE_STATE_BACK_TO_STOP,
};

enum MODBUS_SLAVE_EXCEPTION_CODE
{
    MODBUS_SLAVE_EXECETION_CODE_NONE,
    MODBUS_SLAVE_EXCEPTION_CODE_ILLEGAL_FUNCTION,
    MODBUS_SLAVE_EXCEPTION_CODE_ILLEGAL_DATA_ADDRESS,
    MODBUS_SLAVE_EXCEPTION_CODE_ILLEGAL_DATA_VALUE,
    MODBUS_SLAVE_EXCEPTION_CODE_SLAVE_DEVICE_FAILURE,
    MODBUS_SLAVE_EXCEPTION_CODE_ACKNOWLEDGE,
    MODBUS_SLAVE_EXCEPTION_CODE_SLAVE_DEVICE_BUSY,
    MODBUS_SLAVE_EXCEPTION_CODE_MEMORY_PARITY_ERROR,
    MODBUS_SLAVE_EXCEPTION_CODE_GATEWAY_PATH_UNAVAILABLE,
    MODBUS_SLAVE_EXCEPTION_CODE_GETEWAY_TARGET_DEVICE_FAILED_TO_RESPOND,
};


#endif		// MODBUS_SLAVE_IDEF_H 
